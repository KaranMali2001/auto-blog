/**
 * Type definitions for Auto-Blog Claude implementation
 */

import { Id } from "../../convex/_generated/dataModel";

// Blog Types
export interface Blog {
  _id: Id<"blogs">;
  _creationTime: number;
  title: string;
  content: string;
  status: "pending" | "completed";
  platform: "twitter" | "linkedin";
  userId: Id<"users">;
  commitIds: Id<"commits">[];
  toneType?: string;
  length?: string;
  generationCount?: number;
  autoGenerated?: boolean;
}

// Commit Types
export interface Commit {
  _id: Id<"commits">;
  _creationTime: number;
  commitMessage: string;
  commitSha: string;
  commitAuthor?: string;
  commitRepositoryUrl: string;
  summarizedCommitDiff?: string;
  repoId: Id<"repos">;
  userId: Id<"users">;
  usedInBlogs?: Id<"blogs">[];
}

// Repository Types
export interface Repository {
  _id: Id<"repos">;
  _creationTime: number;
  name: string;
  repoUrl: string;

  userId: Id<"users">;
  owner?: string;
  commitCount?: number;
}

// User Cron Types
export interface UserCron {
  _id: Id<"userCrons">;
  _creationTime: number;
  userId: Id<"users">;
  cronExpression: string;
  status: "enabled" | "disabled";
  selectedRepos: Id<"repos">[];
  jobId?: string;
  nextRun?: number;
  lastRun?: number;
}

// Cron History Types
export interface CronHistory {
  _id: Id<"cronHistories">;
  _creationTime: number;
  userId: Id<"users">;
  userCronId: Id<"userCrons">;
  status: "success" | "failure";
  duration?: number;
  message?: string;
  generatedBlogs?: Id<"blogs">[];
}

// User Types
export interface User {
  _id: Id<"users">;
  _creationTime: number;
  clerkId: string;
  email: string;
  name?: string;
  imageUrl?: string;
  installationId?: number;
}

// Component Props Types
export interface CommitCardProps {
  commit: Commit;
  repository: Repository;
  selected?: boolean;
  onSelect?: (commitId: Id<"commits">) => void;
  variant?: "selectable" | "readonly" | "compact";
  showActions?: boolean;
}

export interface BlogCardProps {
  blog: Blog;
  variant?: "grid" | "list" | "featured";
  onView?: (blogId: Id<"blogs">) => void;
  onEdit?: (blogId: Id<"blogs">) => void;
  onDelete?: (blogId: Id<"blogs">) => void;
}

export interface stats {
  commitCount: number;
  repoCount: number;
  summaryCount: number;
  blogCount: number;
}

// Form Types
export interface BlogGenerationFormData {
  title?: string;
  platform: "twitter" | "linkedin";
  toneType: "technical" | "business" | "hiring" | "custom";
  customTone?: string;
  length: "short" | "medium" | "long";
  commitIds: Id<"commits">[];
}

export interface CronScheduleFormData {
  selectedRepos: Id<"repos">[];
  scheduleType: "daily" | "weekly" | "custom";
  time?: string; // HH:mm format
  dayOfWeek?: number; // 0-6
  cronExpression?: string;
}

// Filter and Sort Types
export type BlogFilter = "all" | "auto" | "manual";
export type BlogSort = "newest" | "oldest";
export type BlogStatus = "pending" | "completed";

// Analytics Types
export interface AnalyticsData {
  totalBlogs: number;
  totalCommits: number;
  totalRepos: number;
  blogsThisMonth: number;
  blogsThisWeek: number;
  platformBreakdown: {
    twitter: number;
    linkedin: number;
  };
  statusBreakdown: {
    completed: number;
    pending: number;
  };
  recentActivity: {
    date: string;
    blogs: number;
    commits: number;
  }[];
}

// Template Types
export interface BlogTemplate {
  _id: string;
  name: string;
  description: string;
  platform: "twitter" | "linkedin";
  toneType: string;
  length: string;
  templateContent: string;
  variables: string[];
  createdAt: number;
  isDefault?: boolean;
}
