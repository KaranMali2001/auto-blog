"use client";

import { useMutation } from "convex/react";
import { Calendar, FileText, Trash2 } from "lucide-react";
import { useRouter } from "next/navigation";
import { useState } from "react";
import { toast } from "sonner";
import { useQueryWithStatus } from "@/app/Providers";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";
import { EmptyState } from "@/components/ui/empty-state";
import { ErrorState } from "@/components/ui/error-state";
import { Spinner } from "@/components/ui/spinner";
import { api } from "../../../convex/_generated/api";
import type { Id } from "../../../convex/_generated/dataModel";

export function BlogsPage() {
  const { data: blogs, isPending, error } = useQueryWithStatus(api.schema.blog.getBlogs);
  const deleteBlog = useMutation(api.schema.blog.deleteBlog);
  const router = useRouter();
  const [showOnlyAutogenerated, setShowOnlyAutogenerated] = useState(false);

  const handleDelete = async (blogId: Id<"blogs">) => {
    try {
      await deleteBlog({ blogId });
      toast.success("Blog deleted successfully");
    } catch (error) {
      console.error("Failed to delete blog:", error);
      toast.error("Failed to delete blog. Please try again.");
    }
  };

  // Filter blogs based on autogenerated toggle
  const filteredBlogs = blogs?.filter((blog) => {
    if (showOnlyAutogenerated) {
      return blog.autoGenerated === true;
    }
    return true;
  });

  if (isPending) {
    return <Spinner centered title="Loading your blog posts..." />;
  }

  if (error) {
    return (
      <div className="flex min-h-screen items-center justify-center p-4">
        <ErrorState
          title="Error Loading Blogs"
          message={error?.message || "Failed to load blogs. Please try again."}
          action={{
            label: "Reload Page",
            onClick: () => window.location.reload(),
          }}
        />
      </div>
    );
  }

  return (
    <div className="container mx-auto max-w-7xl space-y-8 px-4 py-8">
      {/* Header */}
      <div className="space-y-2">
        <h1 className="text-4xl font-bold tracking-tight text-foreground">My Blog Posts</h1>
        <p className="text-muted-foreground">Manage and view your generated blog posts</p>
      </div>

      {/* Filter Toggle */}
      <div className="flex items-center gap-2">
        <Checkbox id="autogenerated-filter" checked={showOnlyAutogenerated} onCheckedChange={(checked) => setShowOnlyAutogenerated(checked as boolean)} />
        <label htmlFor="autogenerated-filter" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
          Show only auto-generated blogs
        </label>
      </div>

      {blogs && blogs.length === 0 ? (
        <EmptyState
          icon={<FileText className="h-10 w-10" />}
          title="No blog posts yet"
          description="Generate your first blog post from your commits"
          action={{
            label: "Go to Dashboard",
            onClick: () => router.push("/dashboard"),
          }}
        />
      ) : filteredBlogs && filteredBlogs.length === 0 ? (
        <EmptyState icon={<FileText className="h-10 w-10" />} title="No auto-generated blog posts found" description="Try unchecking the filter to see all blogs" />
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredBlogs?.map((blog) => (
            <Card key={blog._id} className="hover:shadow-lg transition-shadow">
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <CardTitle className="text-lg line-clamp-2">{blog.title}</CardTitle>
                    <CardDescription className="mt-2">
                      {blog.platform === "twitter" ? "Twitter/X" : "LinkedIn"} â€¢ {blog.commitIds.length} commit
                      {blog.commitIds.length !== 1 ? "s" : ""}
                    </CardDescription>
                  </div>
                  <Badge variant={blog.status === "completed" ? "default" : "secondary"}>{blog.status}</Badge>
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center gap-2 text-sm text-muted-foreground">
                  <Calendar className="h-4 w-4" />
                  <span>{new Date(blog.createdAt).toLocaleDateString()}</span>
                </div>

                {blog.options && (
                  <div className="space-y-1">
                    {blog.options.toneType && (
                      <div className="text-sm">
                        <span className="text-muted-foreground">Tone:</span> {blog.options.toneType}
                      </div>
                    )}
                    <div className="text-sm">
                      <span className="text-muted-foreground">Length:</span> {blog.options.length}
                    </div>
                  </div>
                )}

                <div className="flex gap-2">
                  <Button size="sm" className="flex-1" onClick={() => router.push(`/blogs/${blog._id}`)}>
                    View Blog
                  </Button>
                  <Button size="sm" variant="destructive" onClick={() => handleDelete(blog._id)}>
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
}
